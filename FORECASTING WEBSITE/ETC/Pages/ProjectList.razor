@page "/"
@page "/ProjectList"
@rendermode InteractiveAuto
@using ETCDAL;
@using ETCDAL.Models;
@using ETC.Services;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.WebUtilities
@inject IETCData _db;

@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ProtectedSessionStorage SessionStorage

<div class="header-container">
    <h1 style="color: #0B8DBB;" id="hdrtitle">PM BACKLOG</h1>
    <h4 style="color: #0B8DBB;" id="hdruser">GNET\@CurrentUser</h4>

</div>
<div class="d-flex justify-content-center align-items-center flex-column" style="min-height: 10vh; padding-top: 10px; padding-bottom: 10px; text-align: center;">
    <label for="etcPeriod" class="col-form-label mb-2"><strong>SELECT ETC PERIOD</strong></label>
    <select id="etcPeriod"
            class="form-control w-50"
            value="@userChoice"
            @onchange="OnUserChoiceChanged">
        <option value="">Select Period</option>
        @foreach (var period in etcperiodsList)
        {
            <option value="@period.PeriodName">@period.PeriodName</option>
        }
    </select>
</div>

@if (isLoading)
{
    <div class="text-center mt-3">
        <strong>Loading...</strong>
    </div>
}



@if (!string.IsNullOrEmpty(userChoice))
{

    <div id="messagecontainer" class="container">
    </div>
    <div class="container">
        <div class="container container" style="border-radius: 8px;border: 2px solid slategray; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);margin-bottom:15px;">
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-4">

                        <label for="txtName" class="col-8 col-form-label">Project Name:</label>
                        <div class="col-8">
                            <input type="text" class="form-control" @bind-value="@searchModel.PROJECT_NAME" />
                        </div>
                        <label for="txtNumber" class="col-8 col-form-label">MSO:</label>
                        <div class="col-8">
                            <input type="text" class="form-control" @bind-value="@searchModel.MSO" />
                        </div>

                        <label for="txtName" class="col-8 col-form-label">Period Status:</label>
                        <div class="col-6">
                            <select class="form-control" id="Periodstatuslist" @bind="searchModel.PeriodStatus">
                                <option class="small" value="">Select</option>
                                @foreach (string PeriodStatus in PeriodStatusList)
                                {
                                    <option class="small" value="@PeriodStatus">@PeriodStatus</option>
                                }

                            </select>
                        </div>
                        <div class="col-6">
                            <button id="summarysearchbutton" type="submit" @onclick="@SearchProjects" class="btn btn-outline-success" style="margin-top:10px;">Search</button>
                        </div>
                    </div>

                    @*    Middle column *@
                    <div class="col-sm-4">

                        <label for="txtName" class="col-6 col-form-label">Project Manager:</label>
                        <div class="col-6">
                            <select class="form-control" id="cmbProjectManager" @bind="searchModel.ProjectManager">
                                <option class="small" value="">Select</option>
                                @foreach (string ProjectManager in OracleUserList)
                                {

                                    <option class="small" value="@ProjectManager">@ProjectManager</option>
                                }

                            </select>
                        </div>


                        <label for="txtName" class="col-3 col-form-label">Status</label>
                        <div class="col-6">
                            <select class="form-control" @bind="searchModel.Status">
                                <option value="">Select</option>
                                <option value="Not Submitted">Not Submitted</option>
                                <option value="Approval Pending">Approval Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Submitted">Submitted</option>
                                <option value="Pending">Pending</option>
                                <option value="Pending - Approval Rejected">Rejected</option>
                            </select>
                        </div>

                    </div>
                    <div class="col-sm-4">



                        <label for="txtName" class="col-3 col-form-label">Period</label>
                        <div class="col-6">

                            <select class="form-control" @bind="searchModel.PeriodName">
                                <option class="small" value="">Select</option>
                                @foreach (string PeriodName in PeriodsList)
                                {

                                    <option class="small" value="@PeriodName">@PeriodName</option>
                                }

                            </select>
                        </div>

                        <label for="txtNumber" class="col-6 col-form-label">Project Total (Ext Price)</label>
                        <div class="col-6">
                            <select class="form-control" @bind="searchModel.isOver100K">
                                <option value="-1">Select</option>
                                <option value="2">1M+</option>
                                <option value="1">100K - 1M</option>
                                <option value="0">0 - 100K</option>

                            </select>
                        </div>


                        <label for="txtNumber" class="col-6 col-form-label"></label>
                        <div class="col-6">
                            <span class="badge" style="background-color: purple;">Record Count :@RecordCount</span>
                        </div>


                    </div>
                </div>

            </div>

        </div>

        @if (FilteredProjects is null)
        {
            @*  <p><em>Loading...</em></p>  <span class="spinner-border spinner-border-sm" role="status"></span> *@
        }
        else
        {

            <table class="table table-striped table-bordered table-hover table-sm">
                <thead>
                    <tr class="table-primary">
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("PeriodStatus"))">
                            Period Status
                            <span class="fa @(SetSortIcon("PeriodStatus"))"></span>
                        </th>
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("MSO"))">
                            MSO
                            <span class="fa @(SetSortIcon("MSO"))"></span>
                        </th>
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("PROJECT_NAME"))">
                            Project Name
                            <span class="fa @(SetSortIcon("PROJECT_NAME"))"></span>
                        </th>
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("CUSTOMER_NAME"))">
                            Customer Name
                            <span class="fa @(SetSortIcon("CUSTOMER_NAME"))"></span>
                        </th>
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("ProjectManager"))">
                            Project Manager
                            <span class="fa @(SetSortIcon("ProjectManager"))"></span>
                        </th>
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("PeriodName"))">
                            Period Name
                            <span class="fa @(SetSortIcon("PeriodName"))"></span>
                        </th>


                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("Status"))">
                            Status
                            <span class="fa @(SetSortIcon("Status"))"></span>
                        </th>

                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("Total_Avail_Budget"))">
                            Total Available Budget USD
                            <span class="fa @(SetSortIcon("Total_Avail_Budget"))"></span>
                        </th>
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("Total_Avail_Budget_"))">
                            Total Available Budget Booked Currency
                            <span class="fa @(SetSortIcon("Total_Avail_Budget"))"></span>
                        </th>
                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("TEC_SubmittedValue"))">
                            Total Estimated Cost
                            <span class="fa @(SetSortIcon("TEC_SubmittedValue"))"></span>
                        </th>

                        <th id="summarytablehdr" class="sort-th" @onclick="@(() => SortTable("BudgetUpdate"))">
                            Budget Update Value
                            <span class="fa @(SetSortIcon("BudgetUpdate"))"></span>
                        </th>

                        <th id="summarytablehdr"> Action</th>

                    </tr>
                </thead>
                <tbody id="results">
                    @foreach (var project in FilteredProjects)
                    {
                        decimal ConvertedBudget = Math.Round((decimal)project._Total_Avail_Budget);
                        string FormattedBudget = ConvertedBudget.ToString("N2") +
                        "@" + @project.CONVERSION_RATE;

                        <tr class="small">
                            <td style="color:@(project.PeriodStatus == "Closed" ? "red" : project.PeriodStatus == "Open" ? "green" : "black")">@project.PeriodStatus</td>
                            <td>@project.MSO</td>
                            <td>@project.PROJECT_NAME</td>
                            <td>@project.CUSTOMER_NAME</td>
                            <td>@project.ProjectManager</td>
                            <td>@project.PeriodName (@project.PeriodMonthName)</td>
                            <td>@project.Status</td>
                            <td>@String.Format("{0:C2}", project.Total_Avail_Budget)</td>

                            <td>
                                @if (project.CONVERSION_RATE != 1)
                                {
                                    @project.CURRENCY_CODE  @FormattedBudget
                                }
                            </td>
                            <td>@String.Format("{0:C2}", project.TEC_SubmittedValue)</td>
                            <td style="color: @(project.BudgetUpdate < 0 ? "red" : "inherit");">
                                @String.Format("{0:C2}", project.BudgetUpdate)
                            </td>
                            <td><button type="button" class="btn btn-primary" id="detailsbutton" style="color: white;" @onclick="@(() => NavigateToProjectDetailPage(@project.RecordId))">ETC</button></td>
                        </tr>
                    }
                </tbody>

            </table>
        }
    </div>

}



@code {
    private List<ProjectHeaderModel> projectHeaders;
    private ProjectHeaderModel searchModel = new ProjectHeaderModel();
    private List<ProjectHeaderModel> FilteredProjects;
    private List<PermissionModel> Permissions;
    private List<ManagerModel> Managers;
    private List<UserRegionsModel> UserRegions;
    private string? CurrentUser;
    private bool Admin = false;
    private bool ReadAll = false;
    private List<string?> UserList = new List<string?>();
    private List<string?> OracleUserList = new List<string?>();
    private List<string?> PeriodStatusList = new List<string?>();
    private string? projectMgrSessionValue;
    private string? periodSessionValue;
    private List<string?> PeriodsList = new List<string?>();
    private bool isSortedAscending;
    private string activeSortColumn;
    private int RecordCount = 0;

    private DateTime renderStartTime;
    private List<string?> RegionList = new List<string?>();

    private List<PeriodsModel> etcperiodsList = new List<PeriodsModel>();
    private string userChoice;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // Start timing
        renderStartTime = DateTime.Now;
        System.Diagnostics.Debug.WriteLine($"Render start time: {renderStartTime}");
    }


    private async Task OnUserChoiceChanged(ChangeEventArgs e)
    {
        userChoice = e.Value?.ToString();
        isLoading = true;
        StateHasChanged();

        try
        {
            await CheckPermissions();

            if (Admin || ReadAll)
            {
                UserRegions = await _db.GetUserRegions(CurrentUser);
                RegionList = UserRegions.Select(p => p.Region).Distinct().ToList();
                RegionList.Add(CurrentUser);
            }

            projectHeaders = await _db.GetProjectHeader(null, Admin, ReadAll, UserList, RegionList, userChoice);
            FilteredProjects = projectHeaders;

            PopulateOracleUserList();
            PopulatePeriodsList();
            PopulatePeriodStatusList();

            RecordCount = FilteredProjects.Count();

            await _db.InsertLog(CurrentUser, "ProjectList", "");
            System.Diagnostics.Debug.WriteLine($"Project Header complete: {DateTime.Now}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }



    protected override async Task OnInitializedAsync()
    {

        SharedService sharedService = new SharedService();
        await GetCurrentUser(); //Get the current user signed in
                                // await  CheckPermissions();
        etcperiodsList = await _db.GetPeriods(CurrentUser);
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("periodName", out var period))
        {
            if (!string.IsNullOrWhiteSpace(period))
            {
                userChoice = period;

                // Correct: await the async method
                await OnUserChoiceChanged(new ChangeEventArgs { Value = userChoice });
            }
        }
        // CurrentUser = "GNET\\MRahman";
        // if (projectHeaders == null)
        // {
        //     // Check if the current user has Admin Permission or ReadAll permissions used to determine projects the user can see dictated by region table
        //     if (Admin || ReadAll)
        //     {
        //         UserRegions = await _db.GetUserRegions(CurrentUser);
        //         RegionList = UserRegions
        //                          .Select(p => p.Region)
        //                          .Distinct()
        //                          .ToList();

        //         RegionList.Add(CurrentUser);
        //     }
        //     projectHeaders = await _db.GetProjectHeader(null, Admin,ReadAll, UserList, RegionList, userChoice);
        //     FilteredProjects = projectHeaders;

        //     PopulateOracleUserList();
        //     PopulatePeriodsList();
        //     PopulatePeriodStatusList();

        //     RecordCount = FilteredProjects.Count();
        // }
        // await _db.InsertLog(CurrentUser,"ProjectList","");
        // System.Diagnostics.Debug.WriteLine($"Project Header complete: {DateTime.Now}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadStorageVariables();
        }

        System.Diagnostics.Debug.WriteLine($"After Render complete: {DateTime.Now}");
    }


    private async void SearchProjects()
    {

        if (projectHeaders != null)
        {
            FilteredProjects = projectHeaders
          .Where(p =>
                    (string.IsNullOrEmpty(searchModel.PROJECT_NAME) || (!string.IsNullOrEmpty(p.PROJECT_NAME) && p.PROJECT_NAME.ToLower().Contains(searchModel.PROJECT_NAME.ToLower())))
                    && (string.IsNullOrEmpty(searchModel.MSO) || p.MSO == (searchModel.MSO) || p.MSO.Contains(searchModel.MSO))
                    && (string.IsNullOrEmpty(searchModel.PeriodName) || p.PeriodName == (searchModel.PeriodName))
                    && (string.IsNullOrEmpty(searchModel.PeriodStatus) || p.PeriodStatus == (searchModel.PeriodStatus))
                    && (string.IsNullOrEmpty(searchModel.ProjectManager) || p.ProjectManager == (searchModel.ProjectManager))
                    && (string.IsNullOrEmpty(searchModel.Status) || p.Status == (searchModel.Status))
                    && ((searchModel.isOver100K) == -1 || (searchModel.isOver100K) == null || (p.isOver100K == searchModel.isOver100K))
            )
            .OrderBy(p => p.MSO)
            .ToList();
            RecordCount = FilteredProjects.Count();

            SaveStorageVariables();

            StateHasChanged();

        }
    }


    private void PopulateOracleUserList()
    {
        OracleUserList = projectHeaders
                        .Where(p => p.ProjectManager != null)
                         .Select(p => p.ProjectManager)
                         .Distinct()
                          .OrderBy(pm => pm)
                           .ToList();
    }

    private void PopulatePeriodsList()
    {
        PeriodsList = projectHeaders
                          .Select(p => p.PeriodName)
                         .Distinct()
                           .ToList();
    }

    private async Task GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = authState.User.Identity?.Name;

        System.Diagnostics.Debug.WriteLine($"Auth State complete: {DateTime.Now}");
    }

    private async Task<string> CheckStorageVariableExists(string sessionValue)
    {
        var storageResult = await SessionStorage.GetAsync<string>(sessionValue);
        if (storageResult.Success)
        {
            return storageResult.Value;
        }
        else
        {
            return string.Empty;
        }
    }


    private async void LoadStorageVariables()
    {
        string StorageResult = string.Empty;

        StorageResult = await CheckStorageVariableExists("projectMgrSessionValue");
        if (StorageResult != string.Empty)
        {
            searchModel.ProjectManager = StorageResult;
        }
        var periodResult = await SessionStorage.GetAsync<string>("periodSessionValue");
        if (periodResult.Success)
        {
            searchModel.PeriodName = periodResult.Value;
        }

        var statusResult = await SessionStorage.GetAsync<string>("statusSessionValue");
        if (statusResult.Success)
        {
            searchModel.Status = statusResult.Value;
        }
        StateHasChanged();

    }

    private async void SaveStorageVariables()
    {
        await SessionStorage.SetAsync("projectMgrSessionValue", searchModel.ProjectManager);
        await SessionStorage.SetAsync("periodSessionValue", searchModel.PeriodName);
        await SessionStorage.SetAsync("statusSessionValue", searchModel.Status);
    }

    private async Task CheckPermissions()
    {
        if (CurrentUser != null)
        {
            CurrentUser = CurrentUser.Replace(@"GNET\", "");
            //  CurrentUser = "KHASSAN";
            if (Permissions == null)
            {
                Permissions = await _db.GetPermissions(CurrentUser);
                Admin = Permissions.Any(p => p.Permission == "Admin");
                ReadAll = Permissions.Any(p => p.Permission == "ReadAll");
            }

            Managers = await _db.GetManagerStructure(CurrentUser);
            UserList = Managers
                             .Select(p => p.employee)
                             .Distinct()
                             .ToList();

            UserList.Add(CurrentUser);



            System.Diagnostics.Debug.WriteLine($"Permissions complete: {DateTime.Now}");
        }
    }


    private bool IsSelected(string personId)
    {
        return personId == projectMgrSessionValue;
    }

    private void NavigateToProjectDetailPage(int? RecordId)
    {
        string uri = "TaskList/" + RecordId;
        NavigationManager.NavigateTo(uri);
    }

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            FilteredProjects = projectHeaders.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }

        else
        {
            if (isSortedAscending)
            {
                FilteredProjects = projectHeaders.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                FilteredProjects = projectHeaders.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            isSortedAscending = !isSortedAscending;
        }
    }
    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }


    private void BuildManagersAccessList()
    {
        // Create a list of all employees reporting to the current user and also add the current user
        // This is used when querying the list of Projects to also display the projects owned by the managers direct reports.

    }

    private void PopulatePeriodStatusList()
    {
        PeriodStatusList = projectHeaders
                          .Select(p => p.PeriodStatus)
                         .Distinct()
                           .ToList();
    }

}

